strcpy(blob[row],rowHolder);
            row++;
            memset(rowHolder, 0, sizeof rowHolder);
            printf("%s", rowHolder);
   if ((i !% 16))
        {
            
        }


 strcat(rowHolder, buffer);
        printf("%s \n", buffer);  


    while ((ch = fgetc(in_file)) != EOF)
    {
        char buffer[50];        
        int n = sprintf(buffer, "%02X ", ch);
        blob[i++] = buffer;
    }
    
     printf("Starts here \n\n\n\n\n\n");  
    int currVal = 0;
    int t = 0
    while (currVal != (i))
    {
        printf("%s \n", blob[currRow++]);
        if(t % 16)
    }


while(scanf("%2x", &ch) == 1)
            putchar(ch);


  char buffer[50];
        
        sprintf(buffer, "%02X ", ch);
        // printf("%s\n", buffer);
        strcat(rowHolder, buffer);
        // printf("%s", rowHolder);
        if ((++i % 16 == 0))
        {
            strcpy(blob[row], rowHolder);
            row++;
            // printf("%s \n", rowHolder);
            strcpy(rowHolder, "");
        }



char * blob[10000][100]; //Predefs for hexdump
    // unsigned char rowHolder[50] = "";
    char ch;
    int i = 0;
    int row = 0;
    while ((ch = fgetc(in_file)) != EOF) //hexdump and store in a blob
    {
        char buffer[50];
        sprintf(buffer, "%02X", ch);
        blob[row][i++] = buffer;

        if (i % 16)
        {
            row++;
        }
    }

File: main.o
ELF Header:
Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
Class: ELF64
Data: 2's complement, little endian
Type: REL (Relocatable file)
Version: 0x1
Entry point address: 0x0
Start of program headers: 0 (bytes into file)
Start of section headers: 680 (bytes into file)
Flags: 0x0
Size of this header: 64 (bytes)
Size of program headers: 0 (bytes)
Number of program headers: 0
Size of section headers: 64 (bytes)
Number of section headers: 13
Section header string table index: 12





                    fseek(ElfFile, header.e_shoff + idx * sizeof(sectHdr), SEEK_SET);
                    fread(&sectHdr, 1, sizeof(sectHdr), ElfFile);

  char *SectNames = NULL;
                SectNames = malloc(sectHdr.sh_size);
                fseek(in_file, sectHdr.sh_offset, SEEK_SET);
                fread(SectNames, 1, sectHdr.sh_size, in_file);
                uint32_t idx;

                for (idx = 0; idx < header.e_shnum; idx++)
                {
                    const char *name = "";
                    // if (sectHdr.sh_name)
                    //     ;
                    name = SectNames + sectHdr.sh_name;
                    printf("%s\n", SectNames);
